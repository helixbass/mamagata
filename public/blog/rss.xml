<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Helixbassment]]></title><description><![CDATA[Articles on React, development, etc.]]></description><link>https://gatsby-starter-blog-demo.netlify.com/</link><generator>RSS for Node</generator><lastBuildDate>Sun, 12 May 2019 17:39:25 GMT</lastBuildDate><item><title><![CDATA[Slack tip: personal activity channel]]></title><description><![CDATA[I‚Äôm a big fan of using the Slack Github integration to get Github notifications for projects I‚Äôm involved withTypically in the past, each‚Ä¶]]></description><link>https://gatsby-starter-blog-demo.netlify.com//slack-personal-activity-channel/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.com//slack-personal-activity-channel/</guid><pubDate>Sun, 12 May 2019 13:15:38 GMT</pubDate><content:encoded>&lt;p&gt;I‚Äôm a big fan of using the &lt;a href=&quot;https://slack.github.com/&quot;&gt;Slack Github integration&lt;/a&gt; to get Github notifications for projects I‚Äôm involved with&lt;/p&gt;
&lt;p&gt;Typically in the past, each project has set up its own project-specific ‚Äúactivity channel‚Äù in Slack eg &lt;code class=&quot;language-text&quot;&gt;#project-abc-activity&lt;/code&gt; and then someone sets up all the automated integrations for the project there (Github, Zeplin, ‚Ä¶)&lt;/p&gt;
&lt;p&gt;This works ok, but there have been differing opinions about eg the desired level of verbosity/frequency of notifications on that channel&lt;/p&gt;
&lt;h3&gt;Personalize it&lt;/h3&gt;
&lt;p&gt;Since there‚Äôs typically no human interaction on these activity channels (they‚Äôre ‚Äúread-only‚Äù), why not just have your own personal version of that activity channel where you can tweak the configuration to your heart‚Äôs content?&lt;/p&gt;
&lt;p&gt;That‚Äôs the pattern I‚Äôve landed on: a &lt;code class=&quot;language-text&quot;&gt;#julian-activity&lt;/code&gt; channel where I configure notifications for projects I‚Äôm currently involved in&lt;/p&gt;
&lt;p&gt;Then as I move between projects, that &lt;code class=&quot;language-text&quot;&gt;#julian-activity&lt;/code&gt; channel remains the single home for such notifications - I just add/remove integrations to that channel. No creating new channels every time a new project starts (and then eventually gathering dust once a project is completed since noone usually makes the call to go ahead and delete the shared channel)&lt;/p&gt;
&lt;h3&gt;Github integration tips&lt;/h3&gt;
&lt;p&gt;Once the Slack Github integration is installed, turning on and configuring notifications for a new project is super easy. To start notifications for a new Github repo just type in your Slack activity channel:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;/github subscribe repo-owner/repo-name&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will turn on notifications for issues, pull requests, statuses, commits, deployments, and public by default (per the &lt;a href=&quot;https://get.slack.help/hc/en-us/articles/232289568-GitHub-for-Slack&quot;&gt;docs&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;I like to tweak this a little bit and also get notifications for reviews, comments, and branches. So I‚Äôd typically then type a second command:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;/github subscribe repo-owner/repo-name reviews comments branches&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(You can probably do that all as a single initial command, but this gets the job done)&lt;/p&gt;
&lt;p&gt;Then once I‚Äôm no longer involved in a project, I‚Äôll go to my activity channel and type:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;/github unsubscribe repo-owner/repo-name&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Boom! unsubscribed&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Tip: ‚ÄúJiggle‚Äù Webpack when it can‚Äôt resolve a new import]]></title><description><![CDATA[Sometimes Webpack can get confused when you try and import a new module, failing (even though it should be able to resolve the module) with‚Ä¶]]></description><link>https://gatsby-starter-blog-demo.netlify.com//jiggle-webpack/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.com//jiggle-webpack/</guid><pubDate>Sun, 12 May 2019 13:08:38 GMT</pubDate><content:encoded>&lt;p&gt;Sometimes &lt;a href=&quot;https://webpack.js.org/&quot;&gt;Webpack&lt;/a&gt; can get confused when you try and import a new module, failing (even though it should be able to resolve the module) with an error like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Module not found: Can&amp;#39;t resolve &amp;#39;MyNewModule&amp;#39; in &amp;#39;/Users/jrosse/prj/myproject/src&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Specifically, I‚Äôm able to reproduce this by:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;writing the new import statement &lt;em&gt;before&lt;/em&gt; the new module actually exists&lt;/li&gt;
&lt;li&gt;saving&lt;/li&gt;
&lt;li&gt;creating the new module&lt;/li&gt;
&lt;li&gt;re-saving the first module (the one doing the &lt;code class=&quot;language-text&quot;&gt;import&lt;/code&gt;ing of the new module)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This seems like a Webpack bug (and perhaps is tracked somewhere?), but here‚Äôs the trick that &lt;a href=&quot;https://github.com/mattpetrie&quot;&gt;Matt Petrie&lt;/a&gt; taught me:&lt;/p&gt;
&lt;p&gt;Just ‚Äújiggle‚Äù Webpack by eg changing the order of two of your &lt;code class=&quot;language-text&quot;&gt;import&lt;/code&gt; statements. This should get Webpack to recognize that the new module exists and build successfully üéâ&lt;/p&gt;
&lt;p&gt;Strangely, if you then ‚Äúun-jiggle‚Äù (eg restore the original &lt;code class=&quot;language-text&quot;&gt;import&lt;/code&gt; order), Webpack will fail again! Smells like a caching bug‚Ä¶?&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React best practice: util/propTypes module]]></title><description><![CDATA[When building React apps, there are certain common types of objects (not specific to your app) that may get passed around as props, eg‚Ä¶]]></description><link>https://gatsby-starter-blog-demo.netlify.com//util-proptypes/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.com//util-proptypes/</guid><pubDate>Sun, 12 May 2019 13:02:38 GMT</pubDate><content:encoded>&lt;p&gt;When building React apps, there are certain common types of objects (not specific to your app) that may get passed around as props, eg:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;styles&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;refs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rather than rewriting the prop type for these types of objects manually each time you use them, a nice pattern is to export these ‚Äúcommon prop types‚Äù from a helper module&lt;/p&gt;
&lt;p&gt;For example, here‚Äôs the &lt;code class=&quot;language-text&quot;&gt;util/propTypes.js&lt;/code&gt; module from the current project I‚Äôm working on:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import PropTypes from &amp;#39;prop-types&amp;#39;

export const cssPropType = PropTypes.oneOfType([
  PropTypes.object,
  PropTypes.array,
])
export const classNamePropType = PropTypes.string
export const childrenPropType = PropTypes.node
export const imageSourcePropType = PropTypes.string
export const refPropType = PropTypes.object&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So then if I‚Äôm defining a &lt;code class=&quot;language-text&quot;&gt;Foo&lt;/code&gt; component that accepts an optional &lt;code class=&quot;language-text&quot;&gt;className&lt;/code&gt; prop and a required &lt;code class=&quot;language-text&quot;&gt;containerRef&lt;/code&gt; prop, I can declare its prop types like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Foo.propTypes = {
  className: classNamePropType,
  containerRef: refPropType.isRequired
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which is DRYer and more declarative than doing it by hand would be:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Foo.propTypes = {
  className: PropTypes.string,
  containerRef: PropTypes.object.isRequired
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Prop types with style&lt;/h3&gt;
&lt;p&gt;This comes in particularly handy for styling-related props, which can often accept multiple different types&lt;/p&gt;
&lt;p&gt;For example, this project uses &lt;a href=&quot;https://emotion.sh/&quot;&gt;Emotion&lt;/a&gt;, so the &lt;code class=&quot;language-text&quot;&gt;cssPropType&lt;/code&gt; above is useful. But then on a React Native project, you might define &lt;code class=&quot;language-text&quot;&gt;stylePropType&lt;/code&gt; instead:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;export const stylePropType = PropTypes.oneOfType([
  PropTypes.number,
  PropTypes.object,
  PropTypes.array,
  PropTypes.bool,
])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Make it easy (on yourself) to be declarative&lt;/h4&gt;
&lt;p&gt;If the thought of writing the &lt;code class=&quot;language-text&quot;&gt;import&lt;/code&gt; statement for this existing prop type definition seems like more work than just writing it by hand, check out &lt;a href=&quot;https://github.com/helixbass/eslint-plugin-known-imports&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;eslint-plugin-known-imports&lt;/code&gt;&lt;/a&gt; and let it do the work for you!&lt;/p&gt;
&lt;h4&gt;Reuse between projects&lt;/h4&gt;
&lt;p&gt;Since these common prop types aren‚Äôt project-specific, you can easily reuse most or all of an existing &lt;code class=&quot;language-text&quot;&gt;util/propTypes&lt;/code&gt; module when you start a new React project&lt;/p&gt;
&lt;h4&gt;What about project-specific prop types?&lt;/h4&gt;
&lt;p&gt;I‚Äôd recommend keeping only non-project-specific prop types in &lt;code class=&quot;language-text&quot;&gt;util/propTypes&lt;/code&gt;, but there certainly can be common project-specific prop types as well (eg common data types that you‚Äôre working with)&lt;/p&gt;
&lt;p&gt;What do you think are good patterns for reusing project-specific prop types across different modules?&lt;/p&gt;</content:encoded></item></channel></rss>