{"data":{"site":{"siteMetadata":{"title":"Helixbassment","author":"Julian Rosse"}},"markdownRemark":{"id":"5dd03447-6fe3-564f-9feb-6aef98ac9fb5","excerpt":"When building React apps, there are certain common types of objects (not specific to your app) that may get passed around as props, eg:stylesrefsRather than…","html":"<p>When building React apps, there are certain common types of objects (not specific to your app) that may get passed around as props, eg:</p>\n<ul>\n<li>styles</li>\n<li><code class=\"language-text\">children</code></li>\n<li>refs</li>\n</ul>\n<p>Rather than rewriting the prop type for these types of objects manually each time you use them, a nice pattern is to export these “common prop types” from a helper module</p>\n<p>For example, here’s the <code class=\"language-text\">util/propTypes.js</code> module from the current project I’m working on:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import PropTypes from &#39;prop-types&#39;\n\nexport const cssPropType = PropTypes.oneOfType([\n  PropTypes.object,\n  PropTypes.array,\n])\nexport const classNamePropType = PropTypes.string\nexport const childrenPropType = PropTypes.node\nexport const imageSourcePropType = PropTypes.string\nexport const refPropType = PropTypes.object</code></pre></div>\n<p>So then if I’m defining a <code class=\"language-text\">Foo</code> component that accepts an optional <code class=\"language-text\">className</code> prop and a required <code class=\"language-text\">containerRef</code> prop, I can declare its prop types like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Foo.propTypes = {\n  className: classNamePropType,\n  containerRef: refPropType.isRequired\n}</code></pre></div>\n<p>This is DRYer and more declarative than doing it by hand would be:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Foo.propTypes = {\n  className: PropTypes.string,\n  containerRef: PropTypes.object.isRequired\n}</code></pre></div>\n<h3>Prop types with style</h3>\n<p>This comes in particularly handy for styling-related props, which can often accept multiple different types</p>\n<p>For example, this project uses <a href=\"https://emotion.sh/\">Emotion</a>, so the <code class=\"language-text\">cssPropType</code> above is useful. But then on a React Native project, you might define <code class=\"language-text\">stylePropType</code> instead:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">export const stylePropType = PropTypes.oneOfType([\n  PropTypes.number,\n  PropTypes.object,\n  PropTypes.array,\n  PropTypes.bool,\n])</code></pre></div>\n<h3>Make it easy (on yourself) to be declarative</h3>\n<p>If the thought of writing the <code class=\"language-text\">import</code> statement for this existing prop type definition seems like more work than just writing it by hand, check out <a href=\"https://github.com/helixbass/eslint-plugin-known-imports\"><code class=\"language-text\">eslint-plugin-known-imports</code></a> and let it do the work for you!</p>\n<h3>Reuse between projects</h3>\n<p>Since these common prop types aren’t project-specific, you can easily reuse most or all of an existing <code class=\"language-text\">util/propTypes</code> module when you start a new React project</p>\n<h3>What about project-specific prop types?</h3>\n<p>I’d recommend keeping only non-project-specific prop types in <code class=\"language-text\">util/propTypes</code>, but there certainly can be common project-specific prop types as well (eg common data types that you’re working with)</p>\n<p>What do you think are good patterns for reusing project-specific prop types across different modules?</p>","frontmatter":{"title":"React best practice: util/propTypes module","date":"May 12, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/util-proptypes/","previous":{"fields":{"slug":"/hi-folks/"},"frontmatter":{"title":"New Beginnings"}},"next":null}}